# import UserInfo from 'fragments.graphql'

fragment UserProfile on rangers_users {
  id
  handle
  created_at
  friends {
    user {
      ...UserInfo
    }
  }
  sent_requests {
    user {
      ...UserInfo
    }
  }
  received_requests {
    user {
      ...UserInfo
    }
  }
}

fragment NavProfile on rangers_users {
  id
  handle
  received_requests_aggregate {
    aggregate {
      count
    }
  }
}

query getNavProfile($id: String!) {
  profile: rangers_users_by_pk(id: $id) {
    ...NavProfile
  }
}

query getProfile($id: String!) {
  profile: rangers_users_by_pk(id: $id) {
    ...UserProfile
  }
  settings: rangers_user_settings_by_pk(user_id: $id) {
    user_id
    private_decks
  }
}
query getProfileByHandle($handle: String!) {
  profile: rangers_users(
    where: {
      handle: {
        _ilike: $handle
      }
    }
	) {
    ...UserProfile
  }
}

query friendStatus($fromUserId:String!, $toUserId:String!) {
  rangers_friend_status_by_pk(
    user_id_a: $fromUserId
    user_id_b: $toUserId
  ) {
    status
  }
}

mutation sendFriendRequest($fromUserId:String!, $toUserId:String!) {
  insert_rangers_friend_status(
    objects: [
      {
        user_id_a: $fromUserId
        user_id_b: $toUserId
        status: sent
      },
      {
        user_id_a: $toUserId
        user_id_b: $fromUserId
        status: received
      }
    ]
    on_conflict: {
      constraint: friend_status_pkey
      update_columns: [status]
      where: {
        status: { _neq: friend }
      }
    }
  ) {
    affected_rows
  }
}

mutation acceptFriendRequest($fromUserId:String!, $toUserId:String!) {
  insert_rangers_friend_status(
    objects: [
      {
        user_id_a: $fromUserId
        user_id_b: $toUserId
        status: friend
      },
      {
        user_id_a: $toUserId
        user_id_b: $fromUserId
        status: friend
      }
    ]
    on_conflict: {
      constraint: friend_status_pkey
      update_columns: [status]
      where: {
        status: { _neq: friend }
      }
    }
  ) {
    affected_rows
  }
}

mutation rejectFriendRequest($fromUserId:String!, $toUserId:String!) {
  delete_rangers_friend_status(
    where: {
      _or: [
        {
          user_id_a: { _eq: $fromUserId }
          user_id_b: { _eq: $toUserId }
        },
        {
          user_id_a: { _eq: $toUserId }
          user_id_b: { _eq: $fromUserId }
        }
      ]
    }
  ) {
    affected_rows
  }
}